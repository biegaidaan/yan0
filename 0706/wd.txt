

第7章杳找





【考纲内容】
（一）查找的基本概念
（二）顺序查找法
（三）分块查找法
（四）折半查找法
（五）树形查找
二叉搜索树；平衡二叉树：红黑树
（六） B树及其基本操作、B＋树的基本概念
（七）散列(Hash)表
（八）查找算法的分析及应用
【知识框架】


扫一扫

视频讲解

基本概念：静态查找、动态查找

线性结构｛：：：：
分块查找
查找	二叉排序树
树形结构 ｛二叉乎衡树
红烹树
B树、B＋树
　　　　　　　　　性能分析散列结构——散列表  ｛冲突处理

　　　　　　　　　　查找成功效率指标—平均查找长度｛
查找失败
【复习提示】
　　　本竟是考研命题的重点。对于折半查找，应掌握折半查找的过程、构造判定树、分析平均查找长度等。对千二叉排序树、二叉平衡树和红黑树，要了解它们的概念、性质和相关操作等。B树和B＋树是本竞的难点。对于B树，考研大纲要求掌握插入、删除和查找的操作过程：对于B＋树，仅要求了解其基本概念和性质。对于散列查找，应掌握散列表的构造、冲突处理方法（各种方法的处理过程）、查找成功和查找失败的平均查找长度、散列查找的特征和性能分析。

7.1查找的基本概念

l)查找。在数据集合中寻找满足某种条件的数据元素的过程称为查找。查找的结果一般分


为两种：一是查找成功，即在数据集合中找到了满足条件的数据元素：二是查找失败。
2)查找表。用于查找的数据集合称为查找表，它由同一类型的数据元素（或记录）组成。对查找表的常见操作有：CD迕询符合条件的数据元素；＠插入、删除数据元素。
3)静态查找表。若一个查找表的操作只涉及查找操作，则无须动态地修改查找表，此类查找表称为静态查找表。与此对应，需要动态地插入或删除的查找表称为动态查找表。适合静态查找表的查找方法有顺序查找、折半查找、散列查找等；适合动态查找表的查找方法有二叉排序树的查找、散列查找等。
4)关键字。数据元素中唯一标识该元素的某个数据项的值，使用基于关键字的查找，查找结果应该是唯一的。例如，在由一个学生元素构成的数据集合中，学生元素中“学号”这一数据项的值唯一地标识一名学生。
5)平均查找长度。在查找过程中，一次查找的长度是指需要比较的关键字次数，而平均查找长度则是所有查找过程中进行关键字的比较次数的平均值，其数学定义为
ASL＝区Pici
，一1
式中，n是查找表的长度；凡是查找第1个数据元素的概率，一般认为每个数据元素的查找概率相等，即P; =  l/n;  C，是找到第1个数据元素所需进行的比较次数。平均查找长度是衡岳查找算法效率的最主要的指标。


7.2顺序查找和折半查找

7.2.1顺序查找
　　　顺序查找又称线性查找，它对顺序表和链表都是适用的。对千顺序表，可通过数组下标递增来顺序扫描每个元素；对于链表，可通过指针next来依次扫描每个元素。顺序查找通常分为对一般的无序线性表的顺序查找和对按关键字有序的线性表的顺序查找。下面分别进行讨论。
I.一般线性表的顺序查找
　　　作为一种最直观的查找方法，其基本思想；＠从线性表的一端开始，逐个检查关键字是否满足给定的条件；＠若查找到某个元素的关键字满足给定条件，则查找成功，返回该元素在线性表中的位咒；＠若已经查找到表的另一端，但还没有查找到符合给定条件的元素，则返回查找失败的信息。  下面给出其算法，后面说明了算法中引入的＂哨兵”的作用。
七ypedef struct{	//杏找表的数据结构（顺序表）
ElemType *elem;	//动态数组基址
in七Table  Len;	//表的长度
)SSTable;
int  Search_Seq(SSTable  ST,ElemType  key) {
ST.elem[O)=key;	//"哨兵”
for(int    i=ST.TableLen;ST.elem[i)!=key;--i);	//从后往前找
re七urn	i;	//若杳找成功，则返回元素下标：若杳找失败，则返回0

　　　上述算法中，将ST.elem[O]称为咭兵，引入它的目的是使得Search_Seq内的循环不必判断数组是否会越界。算法从尾部开始杳找，若找到ST.elem[i]==key则返回1.们，查找成功。否则一定在查找到ST.elem[O]==key时跳出循环，此时返回的是0,查找失败。在程序中


引入＂哨兵”，可以避免很多不必要的判断语句，从而提窝程序效率。
　　对于有n个元素的表，给定侦key与表中第1个元素相等，即定位第1个元素时，需进行n-i+I次关键字的比较，即C,=n-i+I。查找成功时，顺序查找的平均长度为
ASL成功=＂LP,(n-i+l)
I=1
当每个元素的查找概率相等，即P;=  1/n时，有

ASL成功＝2片(n-i

n—+I

+I)=-
1=1	2
查找不成功时，与表中各关键字的比较次数显然是n+l次，即ASL个,,_,,,  = n + 1。
　　　通常，查找表中记录的查找概率并不相等。若能预先得知每个记录的查找概率，则应先对记录的查找概率进行排序，使表中记录按查找概率由大至小重新排列。
综上所述，顺序查找的缺点是当n较大时，平均查找长度较大，效率低；优点是对数据元素
　的存储没有要求，顺序存储或链式存储皆可。对表中记录的有序性也没有要求，无论记录是否按关键字有序，均可应用。同时还需注意，对链表只能进行顺序查找。
2.有序线性表的顺序查找
　　　若在查找之前就已知表是关键字有序的，则查找失败时可以不用再比较到表的另一端就能返回查找失败的信息，从而降低查找失败的平均查找长度。假设表L是按关键字从小到大排列的，查找的顺序是从前往后，待查找元素的关键字为key,当查找到第1个元素时，发现第1个元素的关键字小于key,但第门1个元素的关键字大千key,这时就可返回查找失败的信息，因为第 1个元素之后的元素的关键字均大于key,所以表中不存在关键字为key的元素。
酝扣料嘈►有序线性表的顺序查找的应用（2013)
　　　可以用如图71所示的判定树来描述有序线性表的查找过程。树中的圆形结点表示有序线性表中存在的元素；矩形结点称为失败结点（若有n个结点，则相应地有n+l个杳找失败结点），它描述的是那些不在表中的数据值的集合。若查找到矩形结点，则说明查找失败。
在找序列	(I0,20,30.40,50,60,)

妞25	2U仓找40


图7.1  有序顺序表上的顺序杳找判定树
　　在有序线性表的顺序查找中，查找成功的平均查找长度和一般线性表的顺序查找一样。查找失败时，查找指针一定走到了某个失败结点。这些失败结点是我们虚构的空结点，实际上是不存在的，所以到达失败结点时所查找的长度等千它上面的一个圆形结点的所在层数。查找不成功的平均查找长度在相等查找概率的悄形下为
1+2+..·+n+n	n	n
ASL不成功＝汇q)(l丿－l) =	＝－＋一—
J=I	n+ l	2	n+ 1


　式中，q］是到达第）个失败结点的概率，在相等查找概率的情形下，它为1/(n + I);力是第丿个失败结点所在的层数。当n=6时，ASL不成功＝6/2 + 6/7 = 3.86,比一般的顺序查找好一些。
注意，有序线性表的顺序查找和后面的折半查找的思想是不一样的，且有序线性表的顺序查
找中的线性表可以是链式存储结构，而折半查找中的线性表只能是顺序存储结构。

7.2.2折半查找
折半查找又称二分查找，它仅适用于有序的顺序表。
酝．E，嘈►  分析对比给定查找算法与折半查找的效率（2016)
　　　折半查找的基本思想：＠首先将给定值key与表中中间位贸的元素比较，若相等，则查找成功，返回该元素的存储位置；＠若不等，则所需查找的元素只能在中间元素以外的前半部分或后半部分（例如，在查找表升序排列时，若key大千中间元素，则所查找的元素只可能在后半部分），然后在缩小的范围内继续进行同样的查找。亟复上述步骤，直到找到为止，或确定表中没有所衙要查找的元素，则查找不成功，返回查找失败的信息。算法如下：
int Binary_Search(SSTable L,ElemType key){
int low=O,high=L.TableLen-1,mid; while (low<=high) {
mid= (low+high) /2;	//取中间位仅
if(L.elem[mid)==key)

return  mid;
else if (L. elem[mid] >key) high=mid-1;
else
low=mid+l;

return  -1;
｝

II杏找成功则返回所在位咒 II从前半部分继续五找
II从后半部分继续查找 II查找失败，返回－I

　　　当折半查找算法选取中间结点时，既可以采用向下取整，又可以采用向上取整。但每次查找的取整方式必须相同，这部分内容请读者结合本题部分习题来理解。
屁和肌谓｝ ► 折半查找的查找路径的判断（2015)
　　　例如，已知11个元素的有序表{7, 10, 13, 16, 19,29,32,33,37,41,43｝，要查找值为11和32的元素，指针low和high分别指向表的下界和上界，mid则指向表的中间位置L(low+high) /2」。
下面来说明查找11的过程（查找32的过程请读者自行分析）：
7	10	13	16	19	29	32	33	37	41	43
t low	l mid	I high
　　　第一次查找时，将中间位置元素与key比较。因为11 <29,说明待查元素若存在，则必在范围 [low,mid-1]内，令high指向位置mid-L   high=m过－1=5,  mid= (1+5) /2=3,第二次查找范围为(1, 5]。
7	10	13	16	19	29	32	33	37	41	43
l low	I mid	I high
　　　第二次查找时，将中间位觉元素与key比较。因为II< 13,说明待查元素若存在，则必在范围 [low, mid-1]内，令high指向位置mid-1, high=m过－1=2, mid= (1+2) /2=1,第三次查找范围为[1,2]。
7	10	13	16	19	29	32	33	37	41	43
　low I	I high mid I


　　第三次查找时，将中间位置元素与key比较。因为11 > 7,说明待查元素若存在，则必在范围 [m过＋1，臣gh]内。令low=mid+1=2, mid=(2+2)/2=2，第四次查找范围为［2, 2]。
7	10	13	16	19	29	32	33	37	41	43
low t I high
1 mid
　第四次查找，此时子表只含有一个元素，且10* 11,所以表中不存在待查元素。配和，靖，卜  分析给定二叉树树形能否构成折半查找判定树（2017)
　　　折半查找的过程可用图7.2所示的二叉树来描述，称为杜尘 树中每个圆形结点表示一个记录，结点中的值为该记录的关键字值；树中最下面的叶结点都是方形的，它表示查找失败的区间。从判定树可以看出，查找成功时的查找长度为从根结点到目的结点的路径上的结点数，而查找失败时的查找长度为从根结点到对应失败结点的父结点的路径上的结点数；每个结点值均大千其左子结点值，且均小千其右子结点俏。若有序序列有n个元素，则对应的判定树有n个圆形的非叶结点和n+I个方形的叶结点。显然，判定树是一棵平衡二叉树（见732节）。









困7.2 描述折半查找过程的判定树
屁让脱i！► 折半查找的最多比较次数的分析（2010、2023)
　　　由上述分析可知，用折半查找法查找到给定值的比较次数最多不会超过树的商度。在等概率查找时，查找成功的平均查找长度为
ASL=－I ,	I忙"	n+ I
　　LI, = (lxl+2x2+···+hx2h-l)=		log2(n+ I)- I"'log2(11+ I}- I n	n	n
式中，h是树的高度，并且元素个数为n时树高h=「log2(n + l)l。所以，折半查找的时间复杂度为O(lo助），平均悄况下比顺序查找的效率高。
　　　在图7.2所示的判定树中，在等概率悄况下，查找成功（圆形结点）的ASL= (Ix I+ 2x2 + 3x4 + 4x4)/11 = 3,查找失败（方形结点）的ASL= (3x4 + 4x8)/12 = 11/3。
　　　因为折半查找需要方便地定位查找区域，所以它要求线性表必须具有随机存取的特性。因此，该查找法仅适合于顺序存储结构，不适合千链式存储结构，且要求元素按关键字有序排列。
7.2.3分块查找
　　　分块查找又称索引顺序查找，它吸取了顺序查找和折半查找各自的优点，既有动态结构，又适于快速查找。
　　　分块查找的基本思想：将查找表分为若干子块。块内的元素可以无序，但块间的元素是有序的，即第一个块中的最大关键字小千第二个块中的所有记录的关键字，第二个块中的砐大关键字


　小于第三个块中的所有记录的关键字，以此类推。再建立一个索引表，索引表中的每个元素含有各块的最大关键字和各块中的第一个元素的地址，索引表按关键字有序排列。
　　　分块查找的过程分为两步：第一步是在索引表中确定待查记录所在的块，可以顺序查找或折半查找索引表：第二步是在块内顺序查找。
例如，关键码集合为{88, 24, 72, 61, 21, 6, 32, 11, 8, 31, 22, 83, 78, 54｝，按照关键码值24, 54, 78,
88,分为4个块和索引表，如图7.3所示。


图7.3 分块查找示意图
　　　分块查找的平均查找长度为索引查找和块内查找的平均长度之和。设索引查找和块内查找的平均查找长度分别为L1和Ls,则分块查找的平均查找长度为
ASL= Li+ L5
　　　将长度为n的查找表均匀地分为b块，每块有s个记录，在等概率情况下，若在块内和索引表中均采用顺序查找，则平均查找长度为

ASL= LI

b+ I  s + I	s2+ 2s+n
＋女＝—＋—=
2	2	2s

此时，若s=＄；，则平均查找长度取最小值$;+1。
　　　虽然索引表占用了额外的存储空间，索引查找也增加了一定的系统开销，但由千其分块结构，使得在块内查找时的范围较小，因此与顺序查找相比，分块查找的总体效率提升了不少。
7.2.4本节试题精选
一．单项选择题
01.顺序查找适合于存储结构为（）的线性表．
A.顺序存储结构或链式存储结构	B.散列存储结构
C.索引存储结构	D.压缩存储结构
02.由n个数据元素组成的两个表：一个递增有序，一个无序。采用顺序查找算法，对有序表从头开始查找，发现当前元素已不小于待查元素时，停止查找，研定查找不成功，已知查找任意一个元素的概率是相同的，则在两种表中成功查找（）．
A.平均时间后者小	B.平均时间两者相同
C.平均时间前者小	D.无法确定
03.对长度为n的有序单链表，若查找每个元素的概率相等，则顺序查找表中任意一个元素的查找成功的平均查找长度为（）．
A. n/2	B. (n + 1)/2	C.  (n—I)/2D.  n/4
04.对长度为3的顺序表进行查找，若查找第一个元素的概率为1/2,查找第二个元素的概率为1/3,查找第三个元素的概率为1/6,则查找任意一个元素的平均查找长度为（）． A.   5/3	B.   2	C.   7/3	D.   4/3
05.下列关于二分查找的叙述中，正确的是（）．


06.【解析】
l)算法的基本设计思想：
　　从矩阵A的右上角（录右列）开始比较，若当前元素小千目标值，则向下寻找下一个更大的元素：若当前元素大千目标值，则从右往左依次比较，若目标值存在，则只可能在该行中。
2)算法的实现：
bool findkey(in七A[)[l,int n,int k){
int i=O, j=n-1;
while(i<n&&j>=O)  {	/／离开边界时查找结束
if(A[i) (j]==k) return  true;  //查找成功
else if(A[i)[j]>kl	]一；	／／向左移动，在该行内寻找目标值
else  i++;	//向下移动，查找下一个更大的元素

return  false;	//查找失败

3)比较次数不超过2n次，时间复杂度为O(n);空间复杂度为0(1)。
07.【解答】
l)折半杏找要求元素有序顺序存储，字符串默认按字典序排序（字典序是一种比较两个字符串大小的方法，它按字母顺序从左到右逐个比较对应的字符，若某一位可比较出大小，则不再继续比较后面的字符，如abd<acd、abc<abcd等），对本题来说do<for< repeat<while。若各个元素的查找概率不同，折半查找的性能不一定优于顺序查找。采用顺序查找时，元素按其查找概率的降序排列时查找长度砐小。
采用顺序存储结构，数据元素按其查找概率降序排列。采用顺序查找方法。查找成功时的平均查找长度＝0.35xJ+ 0.35x2 + O. J5x3 + 0.15x4 = 2.1。
此时，显然查找长度比折半查找的更短。
2)答案I:采用链式存储结构时，只能采用顺序查找，其性能和顺序表一样，类似于上题。数据元素按其查找概率降序排列，构成单链表。采用顺序查找方法。
查找成功时的平均查找长度＝0.35xI + 0.35x2 + O. J 5x3 + 0.[5x4 = 2.1。
答案2:还可以构造成二叉排序树的形式。采用二叉链表的存储结构，构造二叉排序树，元素的存储方式见下图。采用二叉排序树的查找方法。


或	

二叉排序树1	二叉排序树2
查找成功时的平均查找长度＝0.)5xI + 0.35x2 + 0.35x2 + O.l5x3 = 2.0。

7.3树形查找

7.3.1二叉排序树(BST)
构造一棵二叉排序树的目的并不是排序，而是提高查找、插入和删除关键字的速度，二叉排


序树这种非线性结构也有利千插入和删除的实现。 I.二叉排序树的定义
屁扣．涓！► 二叉排序树的应用（2013)
二叉排序树（也称二叉查找树）或者是一棵空树，或者是具有下列特性的二叉树：
　l)若左子树非空，则左子树上所有结点的值均小于根结点的值。  2)若右子树非空，则右子树上所有结点的值均大于根结点的值。
3)左、右子树也分别是一棵二叉排序树。
屁缸．	►  二叉排序树中结点值之间的关系（2015、2018)
　　　根据二叉排序树的定义，左子树结点值＜根结点值＜右子树结点值，因此对二叉排序树进行中序遍历，可以得到一个递增的有序序列。例如，图7.4所示二叉排序树的中序遍历序列为123468。



图7.4 一棵二叉排序树
2.二叉排序树的查找
　　　二叉排序树的查找是从根结点开始，沿某个分支逐层向下比较的过程。若二叉排序树非空，先将给定值与根结点的关键字比较，若相等，则查找成功；若不等，若小千根结点的关键字，则在根结点的左子树上查找，否则在根结点的右子树上查找。这显然是一个递归的过程。
二叉排序树的非递归查找算法：
BSTNode  *BST_Search(BiTree  T,ElemType  key) (
while(T!=NULL&&key!=T->data)    {	//若树空或等于根结点值，则结束循环
　江(key<T->data) T=T->lchild; I／小于，则在左子树上查找 else  T=T->rchild;	II大千，则在右子树上查找

return  T;

　　例如，在图7.4中查找值为4的结点。首先4与根结点6比较。由于4小千6,所以在根结点6的左子树中继续查找。由千4大于2,所以在结点2的右子树中查找，查找成功。
　　　同样，二叉排序树的查找也可用递归算法实现，递归算法比较简单，但执行效率较低。具体的代码实现，留给读者思考。
3.二叉排序树的插入
　　　二叉排序树作为一种动态树表，其特点是树的结构通常不是一次生成的，而是在查找过程中，当树中不存在关键字伯等于给定位的结点时再进行插入的。
　　　插入结点的过程如下：若原二叉排序树为空，则直接插入；否则，若关键字k小于根结点值，则插入到左子树，若关键字K大于根结点值，则插入到右子树。插入的结点一定是一个新添加的


　叶结点，且是查找失败时的查找路径上访问的最后一个结点的左孩子或右孩子。如图7.5所示在一棵二叉排序树中依次插入结点28和结点58,虚线表示的边是其查找的路径。








／插入28

亡？	40)厂
2
(b)插入58

　　　　　　　　　　　　图75 向二叉排序树中插入结点二叉排序树插入操作的算法描述如下：
int BST_Insert(BiTree  &T,KeyType  k) {
if  (T==NULL) {	/／原树为空，新插入的记录为根结点
T= (Bi Tree) malloc (sizeof (BSTNode)) ; T->da七a=k;
T->lchild=T->rchild=NULL;
return	1;	/／返回1，插入成功


else if(k==T->da七a) return	O;
else  if(k<T->data)

／／树中存在相同关键字的结点，插入失败

II插入T的左子树

　　return   BSTInsert (T->lchild, k); else	//插入T的右子树
return  BSTInsert (T->rchild, k) ;


4.二叉排序树的构造
"戌书，► 构造二叉排序树的过程（2020)
　　从一棵空树出发，依次输入元素，将它们插入二叉排序树中的合适位翌。设查找的关键字序列为{45, 24, 53, 45, 12, 24},则生成的二叉排序树如图76所示。

45

＠	24)	(53
12
(a)空树	(b)插入45	(c)插入24	(d)插入53	(e)插入12
　　　　　　　　　　　　　图7.6 二叉排序树的构造过程构造二叉排序树的算法描述如下：
void Creat_BST(BiTree &T,KeyType str[l,int n) {
T=NULL;	仆初始时T为空树 int i=O;
while (i<n) (	I／依次将每个关键字插入二义排序树
BST Insert(T,str[i]);
i++;


5.二叉排序树的删除
　　　在二叉排序树中删除一个结点时，不能把以该结点为根的子树上的结点都删除，必须先把被删除结点从存储二叉排序树的链表上摘下，将因删除结点而断开的二叉链表业新链接起来，同时确保二叉排序树的性质不会丢失。删除橾作的实现过程按3种情况来处理：
＠若被删除结点＝是叶结点，则直接删除，不会破坏二叉排序树的性质。
＠若结点二只有一棵左子树或右子树，则让＝的子树成为二父结点的子树，替代二的位置。
＠若结点二有左、右两棵子树，则令二的直接后继（或直接前驱）替代二，然后从二叉排序树中删去这个直接后继（或直接前驱），这样就转换成了第一或第二种悄况。
图7.7显示了在3种情况下分别删除结点45, 78, 78的过程。


右子树空，用左子女埴补
I





(a)





左千树空，JIJ右于女坟补
l





(b)





　左、小千树均不生，在右千树上找中序第一个子女埴补
l
转换为删除81



(c)

　　　　　　　　　　　　　图7.7  3种悄况下的删除过程酝，叫濬'►`二叉排序树中删除并插入某结点的分析（2013)
思考：若在二叉排序树中删除并插入某结点，得到的二叉排序树是否和原来的相同？
6.二叉排序树的查找效率分析
　　　二叉排序树的查找效率，主要取决千树的高度。若二叉排序树的左、右子树的高度之差的绝对值不超过1（平衡二叉树，下一节），它的平均查找长度为O(log江）。若二叉排序树是一个只有右（左）孩子的单支树（类似千有序的单链表），则其平均查找长度为O(n)。
　　　在最坏情况下，即构造二叉排序树的输入序列是有序的，则会形成一个倾斜的单支树，此时二叉排序树的性能显著变坏，树的高度也增加为元素个数n,如图78(b)所示。



45





12


28	40




53


(a)



60	55
泸
7-0	70
(b)

　　　　　　　　　　　图7.8 相同关键字组成的不同二叉排序树在等概率情况下，图7.8(a)查找成功的平均查找长度为
ASL.= (I+ 2x2 + 3x4 + 4x3)/10 = 2.9
而图7.8(b)查找成功的平均查找长度为
ASLb= (I + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + I 0)/10 = 5.5
　　　从查找过程看，二叉排序树与二分查找相似。就平均时间性能而言，二叉排序树上的查找和二分查找差不多。但二分查找的判定树唯一，而二叉排序树的查找不唯一，相同的关键字其插入顺序不同可能生成不同的二叉排序树，如图7.8所示。
　　　就维护表的有序性而言，二叉排序树无须移动结点，只需修改指针即可完成插入和删除操作，平均执行时间为O(lo卸n)。二分查找的对象是有序顺序表，若有插入和删除结点的操作，所花的代价是O(n)。当有序表是静态查找表时，宜用顺序表作为其存储结构，而采用二分查找实现其找操作；若有序表是动态查找表，则应选择二叉排序树作为其逻辑结构。
7.3.2平衡二叉树
I.平衡二叉树的定义
　　　为了避免树的高度增长过快，降低二叉排序树的性能，规定在插入和删除结点时，要保证任意结点的左、右子树高度差的绝对值不超过1，将这样的二叉树称为平衡二叉树（Balanced BinaryTree),也称AVL树。定义结点左子树与右子树的商度差为该结点的平衡因子，则平衡二叉树结点的平衡因子的值只可能是－l、0或1。
屁的， 靖，► 平衡二叉树的定义（2009)
　　　因此，平衡二叉树可定义为或是一棵空树，或是具有下列性质的二叉树：它的左子树和右子树都是平衡二叉树，且左子树和右子树的高度差的绝对值不超过1。图7.9(a)所示是平衡二叉树，图7.9(b)所示是不平衡的二叉树。结点中的数字为该结点的平衡因子。







(a)斗衡二义树	(b)不斗衡的二义树

图7.9 平衡二叉树和不平衡的二义树


2.平衡二叉树的插入
　　　二叉排序树保证平衡的基本思想如下：每当在二叉排序树中插入（或删除）一个结点时，首先检查其插入路径上的结点是否因为此次操作而导致了不平衡。若导致了不平衡，则先找到插入路径上离插入结点最近的平衡因子的绝对值大于1的结点A,再对以A为根的子树，在保待二叉排序树特性的前提下，调整各结点的位置关系，使之重新达到平衡。
屁缸脱瀑！► 平衡二叉树中插入操作的特点(2015)

　　每次调整的对象都是最小不平衡子树，即以插入路径上离插入结点最近的平衡因子的绝对值大于l的结点作为才长的子树。图7.10中的虚线柜内为最小不平衡子树．










插入27、16、75、38之后的二义排序树

插入51
I〉




0

对酘小不平衡树
I〉
执行LR旋转

图7 10 最小不平衡子树示意

"	.i.， L.,	►  平衡二叉树的插入及调整操作的实例（2010, 2019、2021)
　　　平衡二叉树的插入过程的前半部分与二叉排序树相同，但在新结点插入后，若造成查找路径上的某个结点不再平衡，则需要做出相应的调整。可将调整的规律归纳为下列4种悄况：
1)LL平衡旋转（右单旋转）。由于在结点A的左孩子(L)的左子树（L)上插入了新结点， A的平衡因子由1增至2,导致以A为根的子树失去平衡，需要一次向右的旋转操作。将 A的左孩子B向右上旋转代替A成为根结点，将A向右下旋转成为B的右孩子，而B的原右子树则作为A的左子树。如图7.11所示，结点旁的数值代表结点的平衡因子，而用方块表示相应结点的子树，下方数值代表该子树的高度。



/-/	fl
(a)插入结点前

11+1	II
(b)插入结点导致不平衡
图7.11  LL平衡旋转

H	H
(c)LL旋转（右单旋转）

2)RR平衡旋转（左单旋转）。由于在结点A的右孩子(R)的右子树（R)上插入了新结点，
A的平衡因子由－1减至－2,导致以A为根的子树失去平衡，需要一次向左的旋转操作。


将A的右孩子B向左上旋转代替A成为根结点，将A向左下旋转成为B的左孩子，而B的原左子树则作为A的右子树，如图7.12所示。






f-1	I-/
(a)插入结点前

H	H+l
(b)插入结点导致个斗衡

图7l2  RR平衡旋转

H	H
(c)RR旋转（丘单旋转）

3)LR平衡旋转（先左后右双旋转）。由于在A的左孩子(L)的右子树（R)上插入新结点， A的平衡因子由1增至2,导致以A为根的子树失去平衡，需要进行两次旋转操作，先左旋转后右旋转。先将A的左孩子B的右子树的根结点C向左上旋转提升到B的位置，然后把结点C向右上旋转提升到A的位置，如图7.13所示。







/-/	H
(a)
(a)插入结点前

H	1-1-1
(b)插入结点导致不平衡
图7.13  LR平衡旋转

H	H	H-I	H
(c)LR旋转（双旋转）

4)RL平衡旋转（先右后左双旋转）。由千在A的右孩子(R)的左子树（L)上插入新结点， A的平衡因子由－l减至－2,导致以A为根的子树失去平衡，需要进行两次旋转操作，先右旋转后左旋转。先将A的右孩子B的左子树的根结点C向右上旋转提升到B的位隍，然后把结点C向左上旋转提升到A的位置，如图7.14所示。



H	H

(a)插入结点前



H	H一1
(b)插入结点导致不斗衡

图7.14  RL平衡旋转









H	H	H-1	H

{c) RL旋转（双旋转）





应，支书九谓·',► 构造平衡二叉树的过程（2013)
　　　以关键字序列{15, 3, 7, 10, 9, 8}构造一棵乎衡二叉树的过程为例，图7.15(d)插入7后导致不平衡，最小不平衡子树的根为15,插入位置为其左孩子的右子树，所以执行LR旋转，先左后右双旋转，调整后的结果如图7.15(e)所示。图7.15(g)插入9后导致不平衡，最小不平衡子树的根为 15,插入位置为其左孩子的左子树，所以执行LL旋转，右单旋转，调整后的结果如图7.15(h)所示。图7.15(i)插入8后导致不平衡，最小不平衡子树的根为7,插入位置为其右孩子的左子树，所以执行RL旋转，先右后左双旋转，调整后的结果如图7.15(i)所示。
$	G)	  
(a)空树	(b)插入15	(c)插入3	(d)插入7	(e)LR旋转	(f)插入10

(g)插入9	(h)旋转LL	(i)插入8	U)RL旋其

图7.15  平衡二叉树的生成过程
3.平衡二叉树的删除
与平衡二叉树的插入操作类似，以删除结点w为例来说明平衡二叉树删除操作的步骤：
l)用二叉排序树的方法对结点w执行删除操作。
2)若导致了不平衡，则从结点w开始向上回溯，找到第一个不平衡的结点z（即最小不平衡子树）；y为结点z的高度砐高的孩子结点；x是结点y的高度最高的孩子结点。
3)然后对以z为根的子树进行平衡调整，其中x、y和z可能的位置有4种情况：  y是z的左孩子，x是y的左孩子(LL,右单旋转）：
y是z的左孩子，x是y的右孩子(LR,先左后右双旋转）；  y是z的右孩子，x是y的右孩子(RR,左单旋转）；
y是z的右孩子，x是y的左孩子(RL,先右后左双旋转）。
　　　这四种情况与插入操作的调整方式一样。不同之处在千，插入操作仅需要对以z为根的子树进行平衡调整：而删除橾作就不一样，先对以z为根的子树进行平衡调整，若调整后子树的高度减1，则可能需要对z的祖先结点进行平衡调整，甚至回溯到根结点（导致树高减l)。
　　　以删除图7. l6(a)的结点32为例，由千32为叶结点，直接删除即可，向上回溯找到第一个不平衡结点44 （即z),   z的高度砐高的孩子结点为78  (y),  y的高度砐高的孩子结点为50  (x),满足RL情况，先右后左双旋转，调整后的结果如图7. l6(c)所示。






右旋
17,-1	声

左旋 ．
。






(a)删除32前



(b)右旋

巴＼。



(c)左旋

图7.16 平衡二叉树的删除
4.平衡二叉树的查找
配，贞悦谩！►  指定条件下平衡二叉树的结点数的分析（2012)
　　在平衡二叉树上进行查找的过程与二叉排序树的相同。因此，在查找过程中，进行关键字的比较次数不超过树的深度。假设以n／，表示深度为h的平衡二叉树中含有的最少结点数。显然，有
n。=0, n1 = I, n2 = 2，并且有n,,=n忙2+n忙I+ I,如图7.17所示，依次推出n3=4, 114 = 7, ns = 12,·。
含有n个结点的平衡二叉树的最大深度为O(log识），因此平均查找效率为O(login)。





图7.17 结点个数n最少的平衡二叉树

深度为h的平衡二叉树中含有的最多结点数显然是满二叉树的悄况。
7.3.3红黑树
I.红黑树的定义
　　　为了保待AVL树的平衡性，在插入和删除操作后，会非常频繁地调整全树整体拓扑结构，代价较大。为此在AVL树的平衡标准上进一步放宽条件，引入了红黑树的结构。
一棵红黑树是满足如下红黑性质的二叉排序树：
0每个结点或是红色，或是黑色的．
＠根结点是黑色的．
叶结点（虚构的外部结点、NULL结点）都是黑色的．
＠不存在两个相邻的红结点（即红结点的父结点和孩子结点均是黑色的）．
对每个结点，从该结点到任意一个叶结点的简单路径上，所含黑结点的数量相同．
与折半查找树和B树类似，为了便于对红黑树的实现和理解，引入了n+I个外部叶结点，

300	2025年数据结构考研复习指导

以保证红黑树中每个结点（内部结点＿）的左、右孩子均非空。图7.18所示是一棵红黑树。
I空结点
．黑结点
C)红结点

bh书



bh=0

图7.18  一棵红黑树

　　　从某结点出发（不含该结点）到达一个叶结点的任意一个简单路径上的黑结点总数称为该结点的黑高（记为bh),黑庙的概念是由性质＠确定的。根结点的黑窝称为红黑树的黑高。
结论1:从根到叶结点的最长路径不大千最短路径的2倍。
　　　由性质＠，当从根到任意一个叶结点的简单路径最短时，这条路径必然全由黑结点构成。由性质＠，当某条路径最长时，这条路径必然是由黑结点和红结点相间构成的，此时红结点和黑结点的数拭相同。图7.18中的6-2和6-)5-)8-20就是这样的两条路径。
结论2:有n个内部结点的红黑树的高度h::s;21ogi(n + I)。
　　证明：由结论l可知，从根到叶结点（不含叶结点）的任何一条简单路径1二都至少有一半是黑结点，因此，根的黑高至少为h/2,千是有n>2hl2-  1，即可求得结论。
　　　可见，红黑树的“适度平衡＂，由AVL树的＂寐度平衡＂，降低到“任意一个结点左右子树的高度，相差不超过2倍“，也降低了动态橾作时调整的频率。对于一棵动态查找树，若插入和删除操作比较少，查找操作比较多，则采用AVL树比较合适，否则采用红黑树更合适。但由于维护这种高度平衡所付出的代价比获得的效益大得多，红黑树的实际应用更广泛，C++中的map和 set  (Java中的TreeMap和Treese七）就是用红黑树实现的。
2.红黑树的插人
　　　红黑树的插入过程和二义查找树的插入过程基本类似，不同之处在千，在红黑树中插入新结点后需要进行调整（主要通过重新若色或旋转操作进行），以满足红黑树的性质。
结论3:新插入红黑树中的结点初始着为红色。
　　　假设新插入的结点初始着为黑色，则这个结点所在的路径比其他路径多出一个黑结点（几乎每次插入都破坏性质＠），调整起来也比较麻烦。若插入的结点是红色的，则此时所有路径上的黑结点数弑不变，仅在出现连续两个红结点时才需要调整，而且这种调整也比较简单。
设结点z为新插入的结点。插入过程描述如下：
l)用二叉查找树插入法插入，并将结点z若为红色。若结点z的父结点是黑色的，无须做任何调整，此时就是一棵标准的红黑树。
2)若结点z是根结点，则将z若为黑色（树的黑高增I),结束。
3)若结点z不是根结点，且z的父结点z.p是红色的，则分为下面三种悄况，区别在千z的叔结点y的颜色不同，因z.p是红色的，插入前的树是合法的，根据性质＠和＠，爷结点 z.p.p必然存在且为黑色。性质＠只在z和z.p之间被破坏了。


情况1: z的叔结点y是黑色的，且z是一个右孩子。情况2:  z的叔结点y是黑色的，且z是一个左孩子。
每棵子树Tl、T公乃和兀都有一个黑色根结点，且具有相同的黑高。
　　　情况I (LR,先左旋，再右旋），即z是其爷结点的左孩子的右孩子。先做一次左旋将此悄形转变为悄况2 （变为悄况2后再做一次右旋），左旋后z和父结点z.p交换位置。因为z和zp都是红色的，所以左旋操作对结点的黑高和性质＠都无影响。
情况2  (LL,右单旋），即z是其爷结点的左孩子的左孩子。做一次右旋，并交换z的原父结
　点和原爷结点的颜色，就可以保待性质＠，也不会改变树的黑商。这样，红黑树中也不再有连续两个红结点，结束。情况1和悄况2的调整方式如图719所示。

y  _~~-►	y 	►





悄况l	情况2


注：p表示父结点；p.p表示爷结点
。红结点 ．黑结点

图7.19  情况1和悄况2的调整方式
若父结点z.p是爷结点z.p.p的右孩子，则还有两种对称的悄况：RL（先右旋，再左旋）和
RR（左单旋），这里不再赘述。红黑树的调整方法和AVL树的调整方法有异曲同工之妙。情况3:  z的叔结点y是红色的．
　　　悄况3 (z是左孩子或右孩子无影响），z的父结点z.p和叔结点y都是红色的，因为爷结点 z.p.p是黑色的，将z.p和y都着为黑色，将z.p.p着为红色，以在局部保持性质＠和＠。然后，把 z.p.p作为新结点z来重复循环，指针z在树中上移两层。调整方式如图7.20所示。


(a)








(b)	--------	．黑结点
。红结点


图7.20  悄况3的调整方式
若父结点z.p是爷结点z.p.p的右孩子，也还有两种对称的情况，不再赘述。
只要满足悄况3的条件，就会不断循环，每次循环指针z都会上移两层，直到满足2)（表示
z上移到根结点）或悄况l或悄况2的条件。
　　　可能的疑问：虽然插入的初始位置一定是红黑树的某个叶结点，但因为在情况3中，结点z存在不断上升的可能，所以对于三种悄况，结点z都有存在子树的可能。

302,- 2025年数据结构考研复习指导

　　　以图7.2l(a)中的红黑树为例（虚线表示插入后的状态），先后插入5、4和12的过程如图7.21所示。插入5,为情况3,将5的父结点3和叔结点10着为黑色，将5的爷结点变为红色，此时因为7已是根，所以又瓜新抒为黑色，树的黑高加1,结束。插入4,为情况l的对称情况(RL),此时特别注意虚构黑色空结点的存在，先对5做右旋：转变为情况2的对称情况（RR),交换3和4的颜色，再对3做左旋，结束。插入12,父结点是黑色的，无须任何调整，结束。
I空结点

因7为根
－将－7－若－为－黑－色－嚷
树的黑高加I...L-
IY
GJ

．黑结点
0红结点


(a)插入5	(b)第一步调整

z
(c)第二步调整，插入4



悄况l的对称情况(RL)
－－－对－5做－－右－旋－－►

情况2的对称情况(RR)
－交－换－－3和－4－的－颜－色－►
对3做左旋




(d)第一步谓整	(c)笫二步谓整，插入12

图7.21 红黑树的插入过程
*3.红黑树的删除°
　　　红黑树的插入操作容易导致连续的两个红结点，破坏性质＠。而删除操作容易造成子树黑商的变化（删除黑结点会导致根结点到叶结点间的黑结点数拭减少），破坏性质＠。
　　　删除过程也是先执行二叉查找树的删除方法。若待删结点有两个孩子，不能直接删除，而要找到该结点的中序后继（或前驱）填补，即右子树中最小的结点，然后转换为删除该后继结点。由于后继结点至多只有一个孩子，这样就转换为待删结点是终端结点或仅有一个孩子的情况。
最终，删除一个结点有以下两种悄况：待删结点只有右子树或左子树。
待删结点没有孩子。
l)若待删结点只有右子树或左子树，则只有两种情况，如图7.22所示。


～删除Y►	•

？－－删除二。
．黑结点
0红结点

图7.22 只有右子树或左子树的删除情况
只有这两种情况存在。子树只有一个结点，且必然是红色，否则会破坏性质＠。
2)待删结点无孩子，且该结点是红色的，这时可直接删除，而不需要做任何调整。
3)待删结点无孩子，且该结点是黑色的，这时设待删结点为y,   X是用来替换y的结点（注

O木节难度较大，考在的概率较低，读者可根据自身情况决定学习的时机或是否学习。


意，当y是终端结点时，x是黑色的NULL结点）。删除y后将导致先前包含y的任何路径上的黑结点数扭减l，因此y的任何祖先都不再满足性质＠，简单的修正办法就是将替
换y的结点x视为还有额外一重黑色，定义为双黑结点。也就是说，若将任何包含结点x的路径上的黑结点数猷加I,则在此假设下，性质＠得到满足，但破坏了性质O。千是，
删除操作的任务就转化为将双黑结点恢复为普通结点。
分为以下四种情况，区别在千x的兄弟结点w及w的孩子结点的颜色不同。情况I: X的兄弟结点w是红色的．
　　　悄况),   w必须有黑色左右孩子和父结点。交换w和父结点x.p的颜色，然后对x.p做一次左旋，而不会破坏红黑树的任何规则。现在，x的新兄弟结点是旋转之前w的某个孩子结点，其颜色为黑色，这样，就将悄况l转换为怕况2、3或4处理。调整方式如图7.23所示。

．黑结点
0




图7.23 情况l的调整方式
情况2:  X的兄弟结点w是黑色的，且w的右孩子是红色的．
情况3: X的兄弟结点w是黑色的，w的左孩子是红色的，w的右孩子是黑色的．
　　　悄况2  (RR，左单旋），即这个红结点是其爷结点的右孩子的右孩子。交换w和父结点x.p的颜色，把w的右孩子着为黑色，并对x的父结点x.p做一次左旋，将x变为单重黑色，此时不再破坏红黑树的任何性质，结束。调整方式如图7.24所示。



．黑结点C)红结点


图7.24  悄况2的调整方式

　　　悄况3  (RL，先右旋，再左旋），即这个红结点是其爷结点的右孩子的左孩子。交换w和其左孩子的颜色，然后对w做一次右旋，而不破坏红黑树的任何性质。现在，x的新兄弟结点w的右孩子是红色的，这样就将情况3转换为了情况2。调整方式如图7.25所示。

悄况3
－－－－－►



注：白色结点表示既可为黑色也可为红色，对操作没有影响
．黑结点	C)红结点

图7.25 悄况3的调整方式


情况4:  X的兄弟结点w是黑色的，且w的两个孩子结点都是黑色的．
　　　在悄况4中，因为w也是黑色的，所以可从x和w上去掉一重黑色，使得x只有一重黑色而w变为红色。为了补偿从x和w中去掉的一重黑色，把x的父结点x.p额外若一层黑色，以保待局部的黑窝不变。通过将x.p作为新结点x来循环，x上升一层。若是通过情况l进入情况4的，因为原来的x.p是红色的，将新结点x变为黑色，终止循环，结束。调整方式如粕726所示。

悄况4
－－－－－－


．黑结点C)红结点
图7.26 情况4的调整方式
若x是父结点x.p的右孩子，则还有四种对称的情况，处理方式类似，不再赘述。
　　　归纳总结：在悄况4中，因x的兄弟结点w及左右孩子都是黑色，可以从x和w中各提取一瓜黑色（以让x变为普通黑结点），不会破坏性质＠，并把调整任务向上“推“给它们的父结点x.p。在情况l、2和3中，因为x的兄弟结点w或w左右孩子中有红结点，所以只能在x.p子树内用调整和重新看色的方式，且不能改变x原根结点的颜色（否则向上可能破坏性质＠）。怕况l虽然可能会转换为情况4,但困为新x的父结点x.p是红色的，所以执行一次悄况4就会结束。情况l、2和3在各执行常数次的颜色改变和至多3次旋转后便终止，情况4是可能重复执行的唯一情况，每执行一次指针x上升一层，至多O(login)次。
　　　以图7.27(a)中的红黑树为例（虚线表示删除前的状态），依次删除5和15的过程如图7.27所示。删除5,用雄构的黑色NULL结点替换，视为双黑NULL结点，为情况I'交换兄弟结点 12和父结点8的颜色，对8做一次左旋；转变为情况4，从双黑NULL结点和10中各提取一瓜黑色（提取后，双黑NULL结点变为普通NULL结点，图中省略，10变为红色），因原父结点8是红色，所以将8变为黑色，结束。删除15,为情况3的对称情况(LR),交换8和LO的颜色，对8做左旋；转变为情况2的对称悄况(LL),交换10和12的颜色（两者颜色一样，无变化），将10的左孩子8若为黑色，对12做右旋，结束。

．黑结点
C)红结点



(a)删除5	(b)删除后，空叶结点行换	(c)笫一步调整后




7.4B树和B＋树

　　考研大纲对B树和B＋树的要求各不相同，应点在千考查B树，不仅要求理解B树的基本特点，还要求掌握B树的建立、插入和删除操作，而对B＋树则只考查基本概念。
7.4.1B树及其基本操作<D
所谓m阶B树是所有结点的平衡因子均等于0的m路平衡查找树。
屁如， 靖，► B树的定义和特点（2009)
一棵m阶B树或为空树，或为满足如下特性的m叉树：
l)树中每个结点至多有m棵子树，即至多有m-1个关键字。
2)若根结点不是叶结点，则至少有2棵子树，即至少有1个关键字。
3)除根结点外的所有非叶结点至少有「m/27棵子树，即至少有「m/27-I个关键字。
4)所有非叶结点的结构如下：
I,,|	P。|	K, I  p, I	K2 |	P2 |	| k“1 Pn  I
其中，K; (i = I, 2,..·, n)为结点的关键字，且满足K1<K2<..·<Kn: P, Ci=O, 1,..·,n)
为指向子树根结点的指针，且指针PJ.1所指子树中所有结点的关键字均小于K;, P,所指子树中所有结点的关键字均大于K;: n(「m/21- l n m- I)为结点中关键字的个数。
5)所有的叶结点＠都出现在同一层次上，并且不带信息（可以视为外部结点或类似千折半查找判定树的失败结点，实际上这些结点并不存在，指向这些结点的指针为空）。
屁让桐通l ►  B树中关键字数和结点数的分析（2013、2014、2018、2021)
图7.28所示为一棵5阶B树，可以借助该实例来分析上述性质：



内部结点




50 56


图7.28  一棵5阶B树的实例
l)结点的孩子个数等千该结点中关键字个数加1。
2)若根结点没有关键字就没有子树，则此时B树为空；若根结点有关键字，则其子树个数必然大千或等于2,因为子树个数等于关键字个数加1。
3)除根结点外的所有非叶结点至少有「m/2l=「5/27=3棵子树（即至少有「m/2l-l=「5127-  t  =


＠也可写成“B－树”,注意这里的”-”是连接词，不能读作“减”·
＠大多数教材将B树的叶结点定义为失败结点，而408贞题中却常将B树的叶结点定义为砓底层的终端结点．


2个关键字）：至多有5棵子树（即至多有4个关键字）。
4)结点中的关键字从左到右递增有序，关键字两侧均有指向子树的指针，左侧指针所指子树的所有关键字均小于该关键字，右侧指针所指子树的所有关键字均大千该关键字。或者看成下层结点的关键字总是落在由上层结点的关键字所划分的区间内，如第二层砐左结点的关键字划分成了3个区间：（-00, 5), (5, 11), (11, +00),该结点中的3个指针所指子树的关键字均分别落在这3个区间内。
5)所有叶结点均在第4层，代表查找失败的位置。
l.  B树的查找
　　　在B树上进行查找与二叉排序树很相似，只是每个结点都是多个关键字的有序表，在每个结点上所做的不是两路分支决定，而是根据该结点的子树所做的多路分支决定。
B树的查找包含两个基本操作：CD在B树中找结点：＠在结点内找关锦字。由于B树常存
　储在磁盘上，则前一杳找操作是在磁盘上进行的，而后一查找操作是在内存中进行的，即在磁盘上找到目标结点后，先将结点信息读入内存，然后冉采用顺序查找法或折半查找法。因此，在磁盘上进行查找的次数即目标结点在B树上的层次数，决定了B树的查找效率。
　　　在B树上查找到某个结点后，先在有序表中进行查找，若找到则查找成功，否则按照对应的指针信息到所指的子树中去查找（例如，在图7.28中杳找关键字42,首先从根结点开始，根结点只有一个关键字，且42 > 22,若存在，必在关键字22的右边子树上，右孩子结点有两个关键字，而36 < 42 < 45,则若存在，必在36和45中间的千树上，在该子结点中查到关键字42,查找成功）。查找到叶结点时（对应指针为空），则说明树中没有对应的关键字，查找失败。
2.B树的高度（磁盘存取次数）
由上一节得知，B树中的大部分操作所需的磁盘存取次数与B树的高度成正比。
　　　下面来分析B树在不同情况下的高度。当然，首先应该明确B树的高度不包括最后的不带任何信息的叶结点所处的那一层（有些书对B树的高度的定义中，包含最后的那一层）。
若n>1，则对任意一棵包含n个关键字、高度为h、阶数为m的B树：
l)若让每个结点中的关键字个数达到最多，则容纳同样多关键字的B树的商度达到最小。因为B树中每个结点最多有m棵子树，m-1个关键字，所以在一棵高度为h的m阶B树中关键字的个数应满足n::S:(m-1)(1 + m + m五．十m"-1) = mh-1,因此有
h	logm(n+l)
2)若让每个结点中的关键字个数达到最少，则容纳同样多关键字的B树的窝度达到最大。第一层至少有1个结点；第二层至少有2个结点；除根结点外的每个非叶结点至少有「m/27
棵f树，则第三层至少有2「m/27个结点……第h+I层至少有2(「m/2li'-1个结点，注意
　到第h+I层是不包含任何信息的叶结点。对于关键字个数为n的B树，叶结点即查找不成功的结点为n+ I,由此有n+1 2(「m/27）忙l,即h::S:log「心1((11+ I)/2) + l。
例如，假设一棵3阶B树共有8个关键字，则其高度范围为2::S:h::S:3.17,取整数。
3.B树的插入
应．L杻杻，卜  通过插入操作构造一棵初始为空的B树（2020)
　　　与二叉排序树的插入操作相比，B树的插入操作要复杂得多。在B树中查找到插入的位置后，并不能简单地将其添加到终端结点（最底层的非叶结点）中，因为此时可能会导致整棵树不再满足B树定义中的要求。将关键字key插入B树的过且如下：


l)定位。利用前述的B树查找算法，找出插入该关键字的终端结点（在B树中查找key时，会找到表示查找失败的叶结点，因此插入位置一定是最底层的非叶结点）。
2)插入。每个非根结点的关键字个数都在[「m/27-1,  m-1]。若结点插入后的关键字个数小
　　千m,可以直接插入；若结点插入后的关键字个数大千m-1,必须对结点进行分裂。  分裂的方法是：取一个新结点，在插入key后的原结点，从中间位置(「m/27)将其中的关
　键字分为两部分，左部分包含的关键字放在原结点中，右部分包含的关键字放到新结点中，中间位置(「m/27)的结点插入原结点的父结点。若此时导致其父结点的关键字个数也超过了上限，则继续进行这种分裂操作，直至这个过程传到根结点为止，进而导致B树窝度增l。
　　对于m=3的B树，所有结点中最多有m-1=2个关键字，若某结点中已有两个关键字，则结点已满，如图7.29(a)所示。插入一个关键字60后，结点内的关键字个数超过了m-l，如图729(b)所示，此时必须进行结点分裂，分裂的结果如图7.29(c)所示。



(a)插入闱	(b)插入后，结点溢出

图729 结点的“分裂”示意

(c)结点分裂

4.B树的删除
　　　B树的删除操作与插入操作类似，但要稍微复杂一些，即要使得删除后的结点中的关键字个数＞「m／2l-l，因此将涉及结点的“合并”问题。
＂书斗玑，► B树的删除操作的实例(2012、2022)
　　　当被删关键字k不在终端结点中时，可以用K的前驱（或后继）k',即k的左侧子树中“砐右下”的元素（或右侧子树中“砐左下”的元素），来替代k,然后在相应的结点中删除k',关键字k'必定落在某个终端结点中，则转换成了被删关键字在终端结点中的情形。在图7.30的4阶B树中，删除关键字80,用其前驱78替代，然后在终端结点中删除78。


删除80
l》

　　　　　　　　　　图7.30 8树中删除非终端结点关键字的取代 因此只需讨论被删关键字在终端结点中的情形，有下列三种情况：
l)直接删除关键字。若被删关键字所在结点删除前的关键字个数＞「m/27,表明删除该关键字后仍满足B树的定义，则直接删去该关键字。
2)兄弟够借。若被删关键字所在结点删除前的关键字个数＝「m/27-1,且与该结点相邻的右
（或左）兄弟结点的关键字个数习「m/27,则需要调整该结点、右（或左）兄弟结点及其双亲结点（父千换位法），以达到新的平衡。在图7.31(a)中删除4阶B树的关键字65,右兄弟关键字个数＞「m/27 = 2,将71取代原65的位埋，将74调整到7l的位悝。

322,- 2025年数据结构考研复习指导


删除65
I卜




(a)兄弟够供删除5
I〉



(b)兄弟不够借

图7.31  4阶B树中删除终端结点关键字的示意图
3)兄弟不够借。若被删关键字所在结点删除前的关键字个数＝「m/27-  I,且此时与该结点相邻的左、右兄弟结点的关键字个数都＝「m/27-1,则将关键字删除后与左（或右）兄弟结点及双亲结点中的关键字进行合并。在图7.31(b)中删除4阶B树的关键字5,它及其右兄弟结点的关键字个数＝「m/27-1=  1,所以在5删除后将60合并到65结点中。
屁和．靖，► 非空B树的查找、插入，删除操作的特点（2023)
　　　在合并过程中，双亲结点中的关键字个数会减l。若其双亲结点是根结点且关键字个数减少至0 （根结点关键字个数为1时，有2棵子树），则直接将根结点删除，合并后的新结点成为根；若双亲结点不是根结点，且关键字个数减少到「m/27-2,则又要与它自己的兄弟结点进行调整或合并操作，并亚复上述步骤，直至符合B树的要求为止。
7.4.2B＋树的基本概念
屁扫叨I ► B＋树的应用场合（2017)
B＋树是应数据库所需而出现的一种B树的变形树。一棵m阶B＋树应满足下列条件：
l)每个分支结点最多有m棵子树（孩子结点）。
2)非叶根结点至少有两棵子树，其他每个分支结点至少有「m/27棵子树。
3)结点的子树个数与关键字个数相等。
4)所有叶结点包含全部关键字及指向相应记录的指针，叶结点中将关键字按大小顺序排列，并且相邻叶结点按大小顺序相互链接起来（支持顺序查找）。
5)所有分支结点（可视为索引的索引）中仅包含它的各个子结点（即下一级的索引块）中
　　关键字的最大值及指向其子结点的指针。旦．涓！►   B树和B＋树的差异的分析(2016) m阶B＋树与m阶B树的主要差异如下：
l)在B＋树中，具有n个关键字的结点只含有n棵子树，即每个关键字对应一棵子树：而在
B树中，具有n个关键字的结点含有n+I棵子树。
2)在B＋树中，每个结点（非根内部结点）的关键字个数n的范围是「m!2l n m（非叶根结点：2冬n m）；而在B树中，每个结点（非根内部结点）的关键字个数n的范围是「m/27-1
n m-1（根结点： l＜咚m-1)。


3)在B＋树中，叶结点包含了全部关键字，非叶结点中出现的关键字也会出现在叶结点中；而在B树中，敬外层的终端结点包含的关键字和其他结点包含的关键字是不重复的。
4)在B＋树中，叶结点包含信息，所有非叶结点仅起索引作用，非叶结点的每个索引项只含有对应子树的最大关键字和指向该子树的指针，不含有对应记录的存储地址。这样能使一个磁盘块存储更多的关键字，使得磁盘读／写次数更少，查找速度更快。
5)在B＋树中，用一个指针指向关键字砐小的叶结点，将所有叶结点串成一个线性链表。
　　　图732所示为一棵4阶B＋树。可以看出，分支结点的关键字是其子树中最大关键字的副本。通常在B＋树中有两个头指针：一个指向根结点，另一个指向关键字最小的叶结点。因此，可以对B＋树进行两种查找运算：一种是从最小关键字开始的顺序查找，另一种是从根结点开始的多路查找。

图7.32  B＋树结构示意图
　　B＋树的查找、插入和删除操作和B树的基本类似。只是在查找过程中，非叶结点上的关键字值等于给定值时并不终止，而是继续向下查找，直到叶结点上的该关键字为止。所以，在8+树中查找时，无论查找成功与否，每次查找都是一条从根结点到叶结点的路径。
7.4.3本节试题精选
一、单项选择题
01.下图所示是一棵（）．



　　A. 4阶B树B. 3阶B树C. 4阶B＋树 02.下列关于m阶B树的说法中，错误的是（）．
A.棵结点至多有m棵子树
B.所有叶结点都在同一层次上

D.无法确定

C.非叶结点至少有m/2 (m为偶数）或(m + 1)/2 (m为奇数）棵子树 D.棵结点中的数据是有序的
03.以下关于m阶B树的说法中，正确的是（）．
I.每个结点至少有两棵非空子树
II.树中每个结点至多有m-l个关徒字
Ill.所有叶结点在同一层
IV.插入一个元素引起B树结点分裂后，树长高一层




03.【解答】
　　　根据B树的概念，一个索引结点应适应操作系统一次读／写的物理记录大小，其大小应取不超过但最接近一个磁盘页块的大小。假设B树为m阶，一个B树结点最多存放m-1个关键字(58)和对应的记录地址(58)、m个子树指针(58)和1个指示结点中的实际关键字个数的整数(2B),则有
(2x(m- l) +m)x5 + 2 4000
计算结果为m 267。
　　　一个索引结点最多可以存放m-  l =266个索引项，最少可以存放「m/27-1= 133个索引项。全部有n = 20000000个记录，每个记录占用空间2008,每个页块可以存放4000/200 = 20个记录，则全部记录分布在20000000/20 = I 000000个页块中，股多需要占用1000000/133 = 7519个磁盘页块作为B树索引，砐少需要占用I000000/266 = 3760个磁盘页块作为B树索引（注意B树与B+树的不同，B树所有对数据记录的索引项分布在各个层次的结点中，B＋树所有对数据记录的索引项都在叶结点中）。

7.5散列(Hash)表

7.5.1散列表的基本概念
　　　在前面介绍的线性表和树表的查找中，查找记录需进行一系列的关键字比较，记录在表中的位置与记录的关键字之间不存在映射关系，因此在这些表中的查找效率取决于比较的次数。
　　散列函数（也称哈希函数）：一个把查找表中的关键字映射成该关键字对应的地址的函数，记为Hash(key) = Addr（这里的地址可以是数组下标、索引或内存地址等）。
　　　散列函数可能会把两个或两个以上的不同关键字映射到同一地址，称这种情况为冲突，这些发生冲突的不同关键字称为同义词。一方面，设计得好的散列函数应尽拭减少这样的冲突：另一方面，由于这样的冲突总是不可避免的，所以还要设计好处理冲突的方法。
　　散列表（也称哈希表）：根据关键字而直接进行访问的数据结构。也就是说，散列表建立了关键字和存储地址之间的一种直接映射关系。
　　　理想情况下，对散列表进行查找的时间复杂度为0(1),即与表中元素的个数无关。下面分别介绍常用的散列函数和处理冲突的方法。
7.5.2散列函数的构造方法
在构造散列函数时，必须注意以下几点：
l)散列函数的定义域必须包含全部关键字，而值域的范围则依赖于散列表的大小。


2)散列函数计算出的地址应尽可能均匀地分布在整个地址空间，尽可能地减少冲突。
3)散列函数应尽扯简单，能在较短的时间内计算出任意一个关键字对应的散列地址。下面介绍常用的散列函数。
J.直接定址法
直接取关键字的某个线性函数值为散列地址，散列函数为
H(key) = key或H(key) = axkey + b
　式中，a和b是常数。这种方法计纾般简单，且不会产生冲突。它适合关键字的分布基本连续的情况，若关键字分布不连续，空位较多，则会造成存储空间的浪费。
2.除芍余数法
　　这是一种最简单、最常用的方法，假定散列表表长为m,取一个不大千m但最接近或等千m的质数p,利用以下公式把关键字转换成散列地址。散列函数为
H(key) =key%p
　　　除留余数法的关键是选好p,使得每个关键字通过该函数转换后等概率地映射到散列空间上的任意一个地址，从而尽可能减少冲突的可能性。
3.数字分析法
　　　设关键字是r进制数（如十进制数），而r个数码在各位上出现的频率不一定相同，可能在某些位上分布均匀一些，每种数码出现的机会均等；而在某些位上分布不均匀，只有某几种数码经常出现，此时应选取数码分布较为均匀的若干位作为散列地址。这种方法适合千已知的关键字集合，若更换了关键字，则需要瓜新构造新的散列函数。
4.平方取中法
　　　顾名思义，这种方法取关键字的平方值的中间几位作为散列地址。具体取多少位要视实际估况而定。这种方法得到的散列地址与关键字的每位都有关系，因此使得散列地址分布比较均匀，适用于关键字的每位取值都不够均匀或均小千散列地址所需的位数。
　　　在不同的情况下，不同的散列函数具有不同的性能，因此不能笼统地说哪种散列函数砐好。在实际选择中，采用何种构造散列困数的方法取决于关键字栠合的悄况。
7.5.3处理冲突的方法
　　应该注意到，任何设计出来的散列函数都不可能绝对地避免冲突。为此，必须考虑在发生冲突时应该如何处理，即为产生冲突的关键字寻找下一个“空”的Hash地址。用Hi表示处理冲突中第1次探测得到的散列地址，假设得到的另一个散列地址凡仍然发生冲突，只得继续求下一个地址H2，以此类推，贞到Hk不发生冲突为止，则比为关键字在表中的地址。
J.开放定址法
　　　所谓开放定址法，是指表中可存放新表项的空闲地址既向它的同义词表项开放，又向它的非同义词表项开放。其数学递推公式为
H, = (H(key) + d,) %m
式中，H(key)为散列函数；i= 1,2,···,k (k m-1);  m表示散列表表长；d，为增境序列。取定某一增描序列后，对应的处理方法就是确定的。通常有以下4种取法：
屁的相书谓，  堆积现象导致的结果（2014)
l)线性探测法，又称线性探测再散列法。d,= I, 2,…,m-1。它的特点是：冲突发生时，顺


序查看表中下一个单元（探测到表尾地址m-l时，下一个探测地址是表首地址0),直到找出一个空闲单元（当表未填满时一定能找到一个空闲单元）或查遍全表。
线性探铡法可能使第i个散列地址的同义词存入第i+  1个散列地址，这样本应存入第i+
　1个散列地址的元素就争夺第i + 2个散列地址的元素的地址·…..从而造成大量元素在相邻的散列地址上聚集（或堆积）起来，大大降低了查找效率。
2)平方探测法，又称二次探测法。d;=  12, -1气22,-22，．．，吐－炉，其中k m/2,散列表长度
m必须是一个可以表示成4k+ 3的素数。
平方探测法是一种处理冲突的较好方法，可以避免出现“堆积”问题，它的缺点是不能探测到散列表上的所有单元，但至少能探测到一半单元。
3)双散列法。d1= ixHash2(key)。需要使用两个散列函数，当通过第一个散列函数H(key)得到的地址发生冲突时，则利用第二个散列函数Hash2(key)计算该关键字的地址增量。它的具体散列函数形式如下：
H, = (H(key) + ixHash2(key))% m
初始探测位翌H。=H(key)  %m。，是冲突的次数，初始为0。
4)伪随机序列法。di＝伪随机数序列。
＂，相t？	► 散列表中删除部分元素后的查找效率分析（2023)

2.拉链法（链接法，chaining)
　　　显然，对千不同的关键字可能会通过散列函数映射到同一地址，为了避免非同义词发生冲突，可以把所有的同义词存储在一个线性链表中，这个线性链表由其散列地址唯一标识。假设散列地址为1的同义词链表的头指针存放在散列表的第1个单元中，因而查找、插入和删除操作主要在同义词链中进行。拉链法适用于经常进行插入和删除的悄况。
例如，关键字序列为{19, 14,23,01,68,20,84,27,55, II, 10, 79},散列函数H(key) = key%I 3,
用拉链法处理冲突，建立的表如图7.33所示（学完下节内容后，可以尝试计符本例的平均查找长度ASL)。

口了日至







12| ^
图7.33 拉链法处理冲突的散列表


7.5.4散列查找及性能分析

屁缸料嘈

散列表的构造及查找效率的分析(2010、2018、2019)

　　　散列表的查找过程与构造散列表的过程基本一致。对千一个给定的关键字key,根据散列函数可以计算出其散列地址，执行步骤如下：
初始化：Addr=Hash(key);
O检测查找表中地址为Addr的位妞上是否有记录，若无记录，返回查找失败：若有记录，
比较它与key的值，若相等，则返回查找成功标志，否则执行步骤＠。
＠用给定的处理冲突方法计纾“下一个散列地址”，并把Addr置为此地址，转入步骤O。例如，关键字序列{19, 14, 23, 01, 68, 20, 84, 27, 55, 11, 10, 79}按散列函数H(key)=key%13
和线性探测处理冲突构造所得的散列表L如图734所示。

l
图734 用线性探涓法得到的散列表L
　　　给定值84的查找过程为：首先求得散列地址H(84)=6,因1[6]不空且L [6] f:-84,则找第一次冲突处理后的地址H1=(6+l) %16=7,而1[7]不空J=Ll [7]f:.84,则找第二次冲突处理后的地址H2= (6+2) %16=8, L [ 8]不空且1[8)=84,查找成功，返回记录在表中的序号8。
　　　给定值38的查找过程为：先求散列地址H(38)=12,   1(12]不空且1(12)*38,则找下一地址H1= (12+1) %16=13,由千1(13]是空记录，所以表中不存在关键字为38的记录。
查找各关键字的比较次数如lfil7.35所示。
关键字	14
比较次数	I

平均查找长度ASL为

图7.35  查找各关键字的比较次数
ASL= (Ix6+ 2 + 3x3 + 4 + 9)/12 = 2.5

　　　对同一组关键字，设定相同的散列函数，则不同的处理冲突的方法得到的散列表不同，它们的平均查找长度也不同，本例与上节采用拉链法的平均查找长度不同。
从散列表的查找过程可见：
l)虽然散列表在关键字与记录的存储位置之间建立了直接映像，但由千“冲突＂的产生，使得散列表的查找过程仍然是一个给定值和关键字进行比较的过程。因此，仍然需要以平均查找长度作为衡拭散列表的查找效率的度扭。
屁让肌嘈►  影响散列表查找效率的因素(2011、2022)
2)散列表的查找效率取决千三个因素：散列函数、处理冲突的方法和装填因子。装填因子。散列表的装填因子一般记为a,定义为一个表的装满桯度，即
a=		表中记录数n散列表长度m
　　　散列表的平均查找长度依赖于散列表的装填因子a，而不直接依赖于n或m。直观地看，Q'越大，表示装填的记录越“满“，发生冲突的可能性越大：反之发生冲突的可能性越小。